package com.skplanetx.tmapopenapi.ui;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.PointF;import android.os.Handler;import android.util.DisplayMetrics;import android.view.WindowManager;import android.view.View.MeasureSpec;import com.skp.Tmap.TMapMarkerItem2;import com.skp.Tmap.TMapPoint;import com.skp.Tmap.TMapView;import com.skplanetx.tmapopenapi.LogManager;public class MarkerOverlay extends TMapMarkerItem2 {		private DisplayMetrics dm = null;		private boolean 	isClick = false;				private Context 	mContext = null;			private TMapView 	mMapView = null;	private BalloonOverlayView balloonView = null;				private int xPoint1 = 0;	private int yPoint1 = 0;		private int xPoint2 = 0;	private int yPoint2 = 0;		private int xCallout1 = 0;	private int yCallout1 = 0;		private int xCallout2 = 0;	private int yCallout2 = 0;			private int mAnimationCount = 0;			@Override	public Bitmap getIcon() {		return super.getIcon();	}	@Override	public void setIcon(Bitmap bitmap) {		super.setIcon(bitmap);	}			@Override	public void setTMapPoint(TMapPoint point) {		super.setTMapPoint(point);	}	@Override	public TMapPoint getTMapPoint() {		return super.getTMapPoint();	}	public MarkerOverlay(Context context, TMapView view) 	{		this.mContext = context;		this.mMapView = view;				dm = new DisplayMetrics();		WindowManager wmgr = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);		wmgr.getDefaultDisplay().getMetrics(dm);				balloonView = new BalloonOverlayView(mContext, 50);								balloonView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 							MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));				balloonView.layout(0, 0, balloonView.getMeasuredWidth(), balloonView.getMeasuredHeight());					}					@Override	public void draw(Canvas canvas, TMapView mapView, boolean showCallout) {					LogManager.printLog("draw " + showCallout);				int x = mapView.getRotatedMapXForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());		int y = mapView.getRotatedMapYForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());						canvas.save();															canvas.rotate(-mapView.getRotate(), mapView.getCenterPointX(), mapView.getCenterPointY());													float xPos = getPositionX();		float yPos = getPositionY();				int nPos_x, nPos_y;					int nMarkerIconWidth, nMarkerIconHeight;				nMarkerIconWidth = getIcon().getWidth() / 2;		nMarkerIconHeight = getIcon().getHeight() / 2;				if(xPos > 1.0 || yPos > 1.0)		{			nPos_x = 0;			nPos_y = 0;		}else{													nPos_x = (xPos < 0.5)  ? (int)(-(0.5 - xPos) * nMarkerIconWidth) * -1:				 					 (int)((xPos - 0.5) * nMarkerIconWidth ) * -1;											nPos_y = (yPos < 0.5) ?  (int)(-(0.5 - yPos) * nMarkerIconHeight ) * -1:				 					 (int)((yPos - 0.5) * nMarkerIconHeight ) * -1;																								}					x += nPos_x;		y += nPos_y;							canvas.translate(x - nMarkerIconWidth + nPos_x , y - nMarkerIconHeight + nPos_y );				canvas.drawBitmap(getIcon(), 0, 0, null);					canvas.restore();				if(showCallout && isClick)		{				canvas.save();						canvas.rotate(-mapView.getRotate(), mapView.getCenterPointX(), mapView.getCenterPointY());						balloonView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 										MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));						int nTempX =  x - balloonView.getMeasuredWidth() / 2; 						//int nTempY =  y - balloonView.getMeasuredHeight() + getIcon().getHeight() / 2;			int nTempY =  y - balloonView.getMeasuredHeight() + getIcon().getHeight() / 2 + nPos_y;												canvas.translate(nTempX, nTempY);						balloonView.draw(canvas);												xPoint1 = nTempX + balloonView.getMeasuredWidth() - balloonView.getClickImage().getWidth();			yPoint1 = nTempY + balloonView.getMeasuredHeight() - balloonView.getClickImage().getHeight();						xPoint2 = nTempX + balloonView.getMeasuredWidth() + balloonView.getClickImage().getWidth();			yPoint2 = nTempY + balloonView.getMeasuredHeight() ;									xCallout1 = nTempX;			yCallout1 = nTempY;						xCallout2 = nTempX + balloonView.getMeasuredWidth() - balloonView.getClickImage().getWidth();			yCallout2 = nTempY + balloonView.getMeasuredHeight();									canvas.restore();					}		else {			xPoint1 = -1;			yPoint1 = -1;						xPoint2 = -1;			yPoint2 = -1;						xCallout1 = -1;			yCallout1 = -1;									xCallout2 = -1;			yCallout2 = -1;		}						}		public boolean onSingleTapUp(PointF point, TMapView mapView){		 		LogManager.printLog("onSingleTapUp");				float r = getRadius() * dm.density;				int ex = (int) point.x;		int ey = (int) point.y;				int x = mapView.getRotatedMapXForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());		int y = mapView.getRotatedMapYForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());								float xPos = getPositionX();		float yPos = getPositionY();				int nPos_x, nPos_y;					int nMarkerIconWidth, nMarkerIconHeight;				nMarkerIconWidth = getIcon().getWidth() / 2;		nMarkerIconHeight = getIcon().getHeight() / 2;				if(xPos > 1.0 || yPos > 1.0)		{			nPos_x = 0;			nPos_y = 0;		}else{													nPos_x = (xPos < 0.5)  ? (int)(-(0.5 - xPos) * nMarkerIconWidth) * -1:				 					 (int)((xPos - 0.5) * nMarkerIconWidth ) * -1;											nPos_y = (yPos < 0.5) ?  (int)(-(0.5 - yPos) * nMarkerIconHeight ) * -1:				 					 (int)((yPos - 0.5) * nMarkerIconHeight ) * -1;																								}					x += nPos_x;		y += nPos_y;				if (Math.abs(x - ex) <= r && Math.abs(y - ey) <= r) {							LogManager.printLog("onSingleTapUp - 1");						isClick = true;			mapView.showCallOutViewWithMarkerItemID(getID());					}else  if(((xPoint1 <= ex) && (yPoint1 <= ey)) && ((ex <= xPoint2) && (ey <= yPoint2) ))  {						isClick = true;													mapView.markerOnClick(getID());												}else if(((xCallout1 <= ex) && (yCallout1 <= ey)) && ((ex <= xCallout2) && (ey <= yCallout2) )){												isClick = true;																mapView.markerOnClick(getID());					}else {						isClick = false;										}								return false;	}			Handler mHandler = null; 		@Override	public void startAnimation() {		super.startAnimation();				Runnable mRunnable = new Runnable() {	        @Override	        public void run() {	        		        	if(getAnimationIcons().size() > 0)	        	{	        		if(mAnimationCount >= getAnimationIcons().size())	        			mAnimationCount = 0;	        			        		setIcon(getAnimationIcons().get(mAnimationCount));	        			        		mMapView.refreshMap();	        			        		mAnimationCount++;	        			        		mHandler.postDelayed(this, getAniDuration());	        	}	        }	    };	     	    mHandler = new Handler();	 	    mHandler.post(mRunnable);	    	}		      		 }